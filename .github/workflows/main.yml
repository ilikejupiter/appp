name: Secure RDP Setup

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          
          # Disable NLA for broader compatibility
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Configure firewall rules
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart Terminal services
          Restart-Service -Name TermService -Force
          Start-Service -Name SessionEnv -ErrorAction SilentlyContinue

      - name: Create RDP User with Fixed Password
        run: |
          $username = "RDP"
          $password = "Igede123456@"
          
          # Check if user already exists
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Write-Host "User $username already exists. Removing..."
              Remove-LocalUser -Name $username -Confirm:$false
          }
          
          # Create secure password object
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create new user
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          
          # Enable the account
          Enable-LocalUser -Name $username
          
          # Verify user creation
          if (Get-LocalUser -Name $username) {
              Write-Host "User $username created successfully"
              echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
              echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          } else {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          # Download and install Tailscale
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          
          # Wait for installation to complete
          Start-Sleep -Seconds 10

      - name: Establish Tailscale Connection
        run: |
          # Generate unique hostname
          $hostname = "gh-rdp-$env:GITHUB_RUN_ID"
          
          # Connect to Tailscale
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname --accept-routes
          
          # Wait for IP assignment with timeout
          $tsIP = $null
          $maxRetries = 15
          $retryCount = 0
          
          while (-not $tsIP -and $retryCount -lt $maxRetries) {
              Start-Sleep -Seconds 5
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $retryCount++
              Write-Host "Attempt $retryCount/$maxRetries - IP: $tsIP"
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after $maxRetries attempts"
              & "$env:ProgramFiles\Tailscale\tailscale.exe" status
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "RDP_HOSTNAME=$hostname" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected successfully: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connectivity..."
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Hostname: $env:RDP_HOSTNAME"
          
          # Test local RDP service first
          $localTest = Test-NetConnection -ComputerName 127.0.0.1 -Port 3389 -WarningAction SilentlyContinue
          if (-not $localTest.TcpTestSucceeded) {
              Write-Warning "Local RDP service not responding"
          }
          
          # Test through Tailscale
          $remoteTest = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if ($remoteTest.TcpTestSucceeded) {
              Write-Host "✅ RDP connectivity test successful!"
          } else {
              Write-Warning "RDP connectivity test failed, but continuing..."
          }

      - name: Display Connection Information
        run: |
          $border = "=" * 50
          Write-Host "`n$border"
          Write-Host "           RDP ACCESS INFORMATION"
          Write-Host "$border"
          Write-Host "Address:  $env:TAILSCALE_IP"
          Write-Host "Hostname: $env:RDP_HOSTNAME"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "$border"
          Write-Host "Important:"
          Write-Host "- Keep this workflow running to maintain access"
          Write-Host "- Cancel workflow when done to stop billing"
          Write-Host "- Connect via Microsoft Remote Desktop"
          Write-Host "$border`n"

      - name: Maintain Active Connection
        run: |
          # Display status periodically
          $counter = 0
          while ($true) {
              $counter++
              $currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Host "[$currentTime] RDP Session Active - Cycle: $counter"
              Write-Host "  ↳ IP: $env:TAILSCALE_IP | User: $env:RDP_USERNAME"
              
              # Check Tailscale status every 10 minutes
              if ($counter % 4 -eq 0) {
                  Write-Host "  ↳ Checking Tailscale status..."
                  & "$env:ProgramFiles\Tailscale\tailscale.exe" status
              }
              
              # Keep-alive interval
              Start-Sleep -Seconds 300
          }
