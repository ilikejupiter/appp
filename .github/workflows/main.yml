name: Ultimate RDP - Maximum Performance

on:
  # Hapus 'workflow_dispatch' untuk menghilangkan input
  # Workflow ini sekarang hanya dapat dijalankan secara manual (tetap)
  # tetapi tanpa opsi input
  workflow_dispatch:

env:
  CHECK_INTERVAL: 300
  # Tetapkan nilai default yang diminta
  SESSION_DURATION_HOURS: 6
  PERFORMANCE_MODE_LEVEL: 'extreme'
  RDP_STATIC_PASSWORD: 'Igede123456@'

jobs:
  ultimate-rdp:
    runs-on: windows-latest
    # Gunakan variabel env untuk timeout. GitHub Actions dapat mengalikan string numerik
    # di expression, tapi menghilangkan fromJSON() dan menetapkan ke env adalah yang terbaik
    # untuk menghindari masalah 'Unexpected symbol: *' di baris ini.
    timeout-minutes: ${{ env.SESSION_DURATION_HOURS * 60 }}

    steps:
      - name: Initialize Ultimate Session
        run: |
          # Ambil nilai dari environment variable
          $sessionMinutes = ${{ env.SESSION_DURATION_HOURS }} * 60
          $endTime = (Get-Date).AddMinutes($sessionMinutes)
          
          # Simpan ke GITHUB_ENV
          echo "SESSION_END_TIME=$($endTime.ToString('yyyy-MM-dd HH:mm:ss'))" >> $env:GITHUB_ENV
          echo "RDP_START_TIME=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> $env:GITHUB_ENV
          echo "PERFORMANCE_MODE=${{ env.PERFORMANCE_MODE_LEVEL }}" >> $env:GITHUB_ENV
          
          # Get system specs
          $ram = [math]::Round((Get-CimInstance -ClassName Win32_ComputerSystem).TotalPhysicalMemory / 1GB)
          $cpu = (Get-CimInstance -ClassName Win32_Processor).Name
          $cores = (Get-CimInstance -ClassName Win32_Processor).NumberOfCores
          $threads = (Get-CimInstance -ClassName Win32_Processor).NumberOfLogicalProcessors
          
          echo "SYSTEM_RAM=${ram}GB" >> $env:GITHUB_ENV
          echo "CPU_CORES=${cores}" >> $env:GITHUB_ENV
          echo "CPU_THREADS=${threads}" >> $env:GITHUB_ENV
          
          Write-Host "üöÄ ULTIMATE RDP SESSION INITIALIZED"
          Write-Host "üìä System Specifications:"
          Write-Host "   RAM: ${ram}GB"
          Write-Host "   CPU: $cpu"
          Write-Host "   Cores: $cores"
          Write-Host "   Threads: $threads"
          Write-Host "   Performance Mode: ${{ env.PERFORMANCE_MODE_LEVEL }}"
          Write-Host "   Session End: $endTime"

      - name: Disable Windows Defender Completely
        run: |
          Write-Host "üõ°Ô∏è DISABLING WINDOWS DEFENDER COMPLETELY..."
          
          # Stop and disable Defender services
          $defenderServices = @("WinDefend", "WdNisSvc", "Sense", "SecurityHealthService")
          foreach ($service in $defenderServices) {
              try {
                  Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                  Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                  Write-Host "‚úÖ Disabled service: $service"
              } catch {
                  Write-Host "‚ö†Ô∏è Could not disable: $service"
              }
          }
          
          # Disable Defender via Registry
          $defenderPaths = @(
              "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender",
              "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center",
              "HKLM:\SYSTEM\CurrentControlSet\Services\WinDefend",
              "HKLM:\SYSTEM\CurrentControlSet\Services\SecurityHealthService"
          )
          
          foreach ($path in $defenderPaths) {
              try {
                  if (Test-Path $path) {
                      Remove-Item -Path $path -Recurse -Force -ErrorAction SilentlyContinue
                  }
              } catch { }
          }
          
          # Disable Defender features
          Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisableBehaviorMonitoring $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisableBlockAtFirstSeen $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisableIOAVProtection $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisablePrivacyMode $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisableArchiveScanning $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisableIntrusionPreventionSystem $true -ErrorAction SilentlyContinue
          Set-MpPreference -DisableScriptScanning $true -ErrorAction SilentlyContinue
          
          # Disable Defender via Group Policy settings
          $registrySettings = @(
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"; Name="DisableAntiSpyware"; Value=1; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"; Name="DisableRoutinelyTakingAction"; Value=1; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"; Name="DisableRealtimeMonitoring"; Value=1; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"; Name="DisableBehaviorMonitoring"; Value=1; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"; Name="DisableOnAccessProtection"; Value=1; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"; Name="DisableScanOnRealtimeEnable"; Value=1; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"; Name="SpynetReporting"; Value=0; Type="DWord"},
              @{Path="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"; Name="SubmitSamplesConsent"; Value=2; Type="DWord"}
          )
          
          foreach ($setting in $registrySettings) {
              try {
                  if (!(Test-Path $setting.Path)) {
                      New-Item -Path $setting.Path -Force | Out-Null
                  }
                  Set-ItemProperty -Path $setting.Path -Name $setting.Name -Value $setting.Value -Type $setting.Type -Force
              } catch { }
          }
          
          Write-Host "‚úÖ Windows Defender completely disabled"

      - name: Ultimate Performance Optimization
        run: |
          Write-Host "‚ö° APPLYING ULTIMATE PERFORMANCE OPTIMIZATIONS..."
          
          # Extreme Power Plan
          powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61  # Ultimate Performance
          powercfg -setactive e9a42b02-d5df-448d-aa00-03f14749eb61
          powercfg -change -monitor-timeout-ac 0
          powercfg -change -standby-timeout-ac 0
          powercfg -change -hibernate-timeout-ac 0
          powercfg -change -disk-timeout-ac 0
          
          # Disable all visual effects for maximum performance
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name VisualFXSetting -Value 2
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name DragFullWindows -Value "0"
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name MenuShowDelay -Value "0"
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name UserPreferencesMask -Value ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00))
          
          # Disable animations
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name IconsOnly -Value 1
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name ListviewAlphaSelect -Value 0
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name ListviewShadow -Value 0
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name TaskbarAnimations -Value 0
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name TaskbarSizeMove -Value 0
          
          # Optimize system performance
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name NtfsDisableLastAccessUpdate -Value 1
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name DisablePagingExecutive -Value 1
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name LargeSystemCache -Value 1
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name Win32PrioritySeparation -Value 38
          
          # Disable unnecessary services
          $servicesToDisable = @(
              "DiagTrack", "WSearch", "WbioSrvc", "TabletInputService", 
              "XboxGipSvc", "XboxNetApiSvc", "Spooler", "Fax",
              "lmhosts", "ALG", "SCardSvr", "SSDPSRV", "upnphost",
              "WpcMonSvc", "WMPNetworkSvc", "PushToInstall", "MapsBroker"
          )
          
          foreach ($service in $servicesToDisable) {
              try {
                  Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                  Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                  Write-Host "‚úÖ Disabled service: $service"
              } catch {
                  Write-Host "‚ö†Ô∏è Could not disable: $service"
              }
          }
          
          Write-Host "‚úÖ Ultimate performance optimizations applied"

      - name: Extreme RDP Configuration
        run: |
          Write-Host "üéØ CONFIGURING EXTREME RDP PERFORMANCE..."
          
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          
          # Maximum RDP performance settings
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "MaxInstanceCount" -Value 4294967295
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxMonitors" -Value 16
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxShellCount" -Value 4294967295
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxConnectionCount" -Value 4294967295
          
          # Disable security for maximum compatibility
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          
          # RDP Performance tuning
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MinEncryptionLevel" -Value 1
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "MinEncryptionLevel" -Value 1
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "MaxColorDepth" -Value 4
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fEnableVirtualizedGraphics" -Value 1
          
          # Configure firewall for RDP
          netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
          netsh advfirewall firewall add rule name="RDP-Ultimate" dir=in action=allow protocol=TCP localport=3389
          
          # Restart Terminal services
          Restart-Service -Name TermService -Force
          Start-Service -Name SessionEnv -Force
          
          Write-Host "‚úÖ Extreme RDP configuration complete"

      - name: Create Ultimate RDP User
        run: |
          $username = "UltimateRDP"
          $password = "${{ env.RDP_STATIC_PASSWORD }}" # Menggunakan password yang diminta
          
          # Remove existing user if any
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name $username -Confirm:$false
          }
          
          # Create secure password
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create ultimate user with admin privileges
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          Add-LocalGroupMember -Group "Performance Log Users" -Member $username
          
          Enable-LocalUser -Name $username
          
          echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          
          Write-Host "‚úÖ Ultimate RDP user created: $username"

      - name: Install Tailscale with Maximum Performance
        run: |
          Write-Host "üîó INSTALLING TAILSCALE WITH PERFORMANCE OPTIMIZATIONS..."
          
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          # Download with multiple retries
          $retryCount = 0
          $maxRetries = 5
          while ($retryCount -lt $maxRetries) {
              try {
                  Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -TimeoutSec 30
                  break
              } catch {
                  $retryCount++
                  if ($retryCount -eq $maxRetries) { throw }
                  Start-Sleep -Seconds 5
              }
          }
          
          # Install with performance options
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart", "ALLUSERS=1" -Wait
          Remove-Item $installerPath -Force
          
          # Wait for installation
          Start-Sleep -Seconds 10

      - name: Establish Ultimate Tailscale Connection
        run: |
          $hostname = "ultimate-rdp-$env:GITHUB_RUN_ID"
          
          # Connect to Tailscale with aggressive retry
          $maxRetries = 8
          $retryCount = 0
          
          while ($retryCount -lt $maxRetries) {
              try {
                  & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname --accept-routes --accept-dns --reset --force-reauth
                  if ($LASTEXITCODE -eq 0) { break }
              } catch { }
              
              $retryCount++
              if ($retryCount -eq $maxRetries) { 
                  Write-Error "Failed to connect to Tailscale after $maxRetries attempts"
                  exit 1
              }
              Start-Sleep -Seconds 5
          }
          
          # Get IP with timeout
          $tsIP = $null
          $ipRetries = 0
          $maxIpRetries = 30
          
          while (-not $tsIP -and $ipRetries -lt $maxIpRetries) {
              Start-Sleep -Seconds 2
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $ipRetries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP assignment failed"
              & "$env:ProgramFiles\Tailscale\tailscale.exe" status
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "RDP_HOSTNAME=$hostname" >> $env:GITHUB_ENV
          Write-Host "‚úÖ Tailscale connected: $tsIP"

      - name: Apply Network and System Tweaks
        run: |
          Write-Host "üåê APPLYING NETWORK AND SYSTEM TWEAKS..."
          
          # Network performance tweaks
          netsh int tcp set global autotuninglevel=normal
          netsh int tcp set global rss=enabled
          netsh int tcp set global chimney=enabled
          
          # Disable network throttling
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xFFFFFFFF
          
          # Increase system responsiveness
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "SystemResponsiveness" -Value 0
          
          # Disable background applications
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" -Name "GlobalUserDisabled" -Value 1
          
          Write-Host "‚úÖ Network and system tweaks applied"

      - name: Final Performance Boost
        run: |
          Write-Host "üöÄ APPLYING FINAL PERFORMANCE BOOST..."
          
          # Clear temporary files
          Get-ChildItem -Path "C:\Windows\Temp\*" -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          Get-ChildItem -Path "$env:TEMP\*" -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          
          # Clear event logs
          wevtutil el | ForEach-Object { wevtutil cl $_ }
          
          # Reset network stack
          ipconfig /flushdns
          nbtstat -R
          nbtstat -RR
          
          # Final service optimizations
          Set-Service -Name "Themes" -StartupType Automatic -ErrorAction SilentlyContinue
          Start-Service -Name "Themes" -ErrorAction SilentlyContinue
          
          Write-Host "‚úÖ Final performance boost complete"

      - name: Ultimate Connection Verification
        run: |
          Write-Host "üîç PERFORMING ULTIMATE CONNECTION VERIFICATION..."
          
          $tests = @(
              @{Name="Local RDP"; Computer="127.0.0.1"},
              @{Name="Tailscale IP"; Computer="$env:TAILSCALE_IP"},
              @{Name="Localhost"; Computer="localhost"}
          )
          
          $successCount = 0
          foreach ($test in $tests) {
              $result = Test-NetConnection -ComputerName $test.Computer -Port 3389 -WarningAction SilentlyContinue -InformationLevel Quiet
              if ($result) {
                  Write-Host "‚úÖ $($test.Name): SUCCESS"
                  $successCount++
              } else {
                  Write-Host "‚ùå $($test.Name): FAILED"
              }
          }
          
          if ($successCount -eq 0) {
              Write-Error "All connectivity tests failed!"
              exit 1
          }
          
          Write-Host "üéØ Connectivity success rate: $successCount/$($tests.Count)"

      - name: Display Ultimate Connection Info
        run: |
          $border = "‚ïî" + "‚ïê" * 58 + "‚ïó"
          $middle = "‚ïë" + " " * 58 + "‚ïë"
          $bottom = "‚ïö" + "‚ïê" * 58 + "‚ïù"
          
          Write-Host "`n`033[1;32m$border"
          Write-Host "‚ïë                 üöÄ ULTIMATE RDP READY                    ‚ïë"
          Write-Host "$middle"
          Write-Host "‚ïë  üìç Address:   $env:TAILSCALE_IP" + " " * (36 - $env:TAILSCALE_IP.Length) + "‚ïë"
          Write-Host "‚ïë  üè∑Ô∏è Hostname:  $env:RDP_HOSTNAME" + " " * (36 - $env:RDP_HOSTNAME.Length) + "‚ïë"
          Write-Host "‚ïë  üë§ Username:  $env:RDP_USERNAME" + " " * (36 - $env:RDP_USERNAME.Length) + "‚ïë"
          Write-Host "‚ïë  üîë Password:  $env:RDP_PASSWORD" + " " * (36 - $env:RDP_PASSWORD.Length) + "‚ïë"
          Write-Host "$middle"
          Write-Host "‚ïë  üíª RAM:       $env:SYSTEM_RAM" + "GB" + " " * (40 - $env:SYSTEM_RAM.Length) + "‚ïë"
          Write-Host "‚ïë  üéØ Cores:     $env:CPU_CORES" + " " * (40 - $env:CPU_CORES.Length) + "‚ïë"
          Write-Host "‚ïë  ‚ö° Mode:      $env:PERFORMANCE_MODE" + " " * (40 - $env:PERFORMANCE_MODE.Length) + "‚ïë"
          Write-Host "$middle"
          Write-Host "‚ïë  ‚è∞ Started:   $env:RDP_START_TIME" + " " * (36 - $env:RDP_START_TIME.Length) + "‚ïë"
          Write-Host "‚ïë  ‚è∞ Ends:      $env:SESSION_END_TIME" + " " * (36 - $env:SESSION_END_TIME.Length) + "‚ïë"
          Write-Host "$middle"
          Write-Host "‚ïë  üîß Features:  Defender‚ùå Sleep‚ùå Updates‚ùå             ‚ïë"
          Write-Host "‚ïë              Maximum Performance‚úÖ                    ‚ïë"
          Write-Host "$bottom`033[0m`n"

      - name: Maintain Ultimate Session
        run: |
          $sessionEnd = [datetime]::Parse('$env:SESSION_END_TIME')
          $healthCounter = 0
          
          while ((Get-Date) -lt $sessionEnd) {
              $healthCounter++
              $currentTime = Get-Date -Format "HH:mm:ss"
              $remaining = $sessionEnd - (Get-Date)
              $remainingFormatted = $remaining.ToString("hh\:mm\:ss")
              
              Write-Host "`nüéØ [$(Get-Date -Format 'HH:mm:ss')] ULTIMATE RDP ACTIVE"
              Write-Host "   ‚Ü≥ Time Remaining: $remainingFormatted"
              Write-Host "   ‚Ü≥ Health Check: #$healthCounter"
              Write-Host "   ‚Ü≥ Performance Mode: $env:PERFORMANCE_MODE"
              Write-Host "   ‚Ü≥ System RAM: $env:SYSTEM_RAM GB"
              
              # Advanced health monitoring every 15 minutes
              if ($healthCounter % 3 -eq 0) {
                  Write-Host "   üîß Running advanced health checks..."
                  
                  # Monitor system resources
                  $cpuUsage = (Get-Counter "\Processor(_Total)\% Processor Time" -SampleInterval 1 -MaxSamples 3 | 
                              Select-Object -ExpandProperty CounterSamples | 
                              Select-Object -ExpandProperty CookedValue | 
                              Measure-Object -Average).Average
                  
                  $ramUsage = (Get-CimInstance -ClassName Win32_OperatingSystem | 
                              ForEach-Object { 
                                  "{0:N1}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100 / $_.TotalVisibleMemorySize))
                              })
                  
                  Write-Host "   üìä CPU Usage: $([math]::Round($cpuUsage, 1))%"
                  Write-Host "   üìä RAM Usage: $ramUsage%"
                  
                  # Verify critical services
                  $criticalServices = @("TermService", "SessionEnv")
                  foreach ($service in $criticalServices) {
                      $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                      if ($svc.Status -ne "Running") {
                          Write-Host "   ‚ö†Ô∏è Restarting service: $service"
                          Start-Service -Name $service -Force
                      }
                  }
                  
                  # Verify Tailscale connection
                  $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json
                  if ($tsStatus.BackendState -ne "Running") {
                      Write-Host "   üîÑ Reconnecting Tailscale..."
                      & "$env:ProgramFiles\Tailscale\tailscale.exe" up --reset
                  }
              }
              
              # Adaptive sleep based on remaining time
              $minutesLeft = ($sessionEnd - (Get-Date)).TotalMinutes
              if ($minutesLeft < 2) {
                  $sleepTime = 10  # 10 seconds when almost done
              } elseif ($minutesLeft < 5) {
                  $sleepTime = 30  # 30 seconds when ending soon
              } elseif ($minutesLeft < 10) {
                  $sleepTime = 60  # 1 minute
              } else {
                  $sleepTime = 300 # 5 minutes normally
              }
              
              Write-Host "   üí§ Next update in: $sleepTime seconds"
              Start-Sleep -Seconds $sleepTime
          }
          
          Write-Host "`nüéØ ULTIMATE RDP SESSION COMPLETED"
          Write-Host "   Started: $env:RDP_START_TIME"
          Write-Host "   Ended: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "   Total Health Checks: $healthCounter"

      - name: Ultimate Cleanup
        if: always()
        run: |
          Write-Host "üßπ PERFORMING ULTIMATE CLEANUP..."
          
          # Re-enable Defender (optional)
          try {
              Set-MpPreference -DisableRealtimeMonitoring $false -ErrorAction SilentlyContinue
              Set-Service -Name WinDefend -StartupType Automatic -ErrorAction SilentlyContinue
          } catch { }
          
          # Re-enable disabled services
          $servicesToEnable = @("WSearch", "Spooler", "Themes")
          foreach ($service in $servicesToEnable) {
              try {
                  Set-Service -Name $service -StartupType Automatic -ErrorAction SilentlyContinue
              } catch { }
          }
          
          # Remove RDP user
          try {
              Remove-LocalUser -Name "UltimateRDP" -Confirm:$false -ErrorAction SilentlyContinue
          } catch { }
          
          # Disconnect Tailscale
          try {
              & "$env:ProgramFiles\Tailscale\tailscale.exe" down
          } catch { }
          
          Write-Host "‚úÖ Ultimate cleanup completed"
